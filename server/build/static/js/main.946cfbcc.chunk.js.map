{"version":3,"sources":["pages/Finder.js","pages/Sender.js","App.js","serviceWorker.js","index.js"],"names":["Finder","useState","url","setUrl","isMessage","setIsMessage","emails","setEmails","handleSubmit","e","a","preventDefault","axios","post","data","emailsFound","length","status","alert","className","Form","Label","Input","type","value","onChange","target","Button","onClick","positive","to","Table","celled","Header","Row","key","HeaderCell","Body","map","idx","Cell","ribbon","Message","onDismiss","negative","header","Sender","isOpen","setIsOpen","currentEmail","setCurrentEmail","refetch","setRefetch","pass","setPass","user","setUser","handleEmail","email","password","useEffect","get","fetcher","address","timesEmailed","timesRedirected","stopPropagation","primary","Modal","open","onClose","size","icon","Content","style","display","Home","handleDelete","delete","Confirm","content","onCancel","onConfirm","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.946cfbcc.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './../App.css';\nimport './Finder.css';\nimport {\n  Button,\n  Form,\n  Label,\n  Input,\n  Table,\n  Menu,\n  Icon,\n  Message,\n} from 'semantic-ui-react';\nimport { Link } from '@reach/router';\nimport axios from 'axios';\n\nconst Finder = () => {\n  const [url, setUrl] = useState('http://localhost:5000');\n  const [isMessage, setIsMessage] = useState(false);\n  const [emails, setEmails] = useState([]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const { data } = await axios.post('http://localhost:8000/find_emails', {\n      url,\n    });\n\n    if (data.emailsFound.length === 0) return setIsMessage(true);\n    setEmails(data.emailsFound);\n\n    if (!data.status) {\n      return alert('Problem With Url, must start with http');\n    }\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Finder</p>\n        <div>\n          <Form>\n            <div>\n              <Label>Search Url For Emails: </Label>\n              <Input\n                type=\"text\"\n                value={url}\n                onChange={(e) => setUrl(e.target.value)}\n              />\n            </div>\n            <div>\n              <Button onClick={handleSubmit} positive>\n                Search\n              </Button>\n              <Button>\n                <Link to=\"../\">Go Back</Link>\n              </Button>\n            </div>\n          </Form>\n        </div>\n        <div>\n          {emails.length !== 0 && (\n            <Table celled className={'table'}>\n              <Table.Header>\n                <Table.Row key={-1}>\n                  <Table.HeaderCell>Emails</Table.HeaderCell>\n                  <Table.HeaderCell>Address</Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n\n              <Table.Body>\n                {emails.map((e, idx) => (\n                  <Table.Row key={idx}>\n                    <Table.Cell>\n                      <Label ribbon>{idx === 0 ? 'First' : idx + 1}</Label>\n                    </Table.Cell>\n                    <Table.Cell>{e}</Table.Cell>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          )}\n          {isMessage && (\n            <Message\n              className={'message'}\n              onDismiss={() => setIsMessage(false)}\n              negative\n              header=\"No New Emails Found, Try Deleting All Previosly Found Emails In Main Screen\"\n            />\n          )}\n        </div>\n      </header>\n    </div>\n  );\n};\n\nexport default Finder;\n","import React, { useState, useEffect } from 'react';\nimport './../App.css';\nimport './Finder.css';\nimport {\n  Label,\n  Table,\n  Message,\n  Button,\n  Modal,\n  Header,\n  Icon,\n  Form,\n  Input,\n} from 'semantic-ui-react';\nimport { Link } from '@reach/router';\nimport axios from 'axios';\n\nconst emailMode = () => {};\n\nconst Sender = () => {\n  const [isMessage, setIsMessage] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [currentEmail, setCurrentEmail] = useState('');\n  const [refetch, setRefetch] = useState(false);\n  const [emails, setEmails] = useState([]);\n  const [pass, setPass] = useState('');\n  const [user, setUser] = useState('');\n\n  const handleEmail = async () => {\n    const { data } = await axios.post('http://localhost:8000/email', {\n      email: user,\n      password: pass,\n      to: currentEmail,\n    });\n\n    if (data.status) {\n      return alert('done');\n    }\n    return alert('not done');\n  };\n\n  useEffect(() => {\n    const fetcher = async () => {\n      try {\n        const { data } = await axios.get('http://localhost:8000/emails');\n        if (data.status) {\n          return setEmails([...data.data]);\n        } else {\n          return setIsMessage(true);\n        }\n      } catch (e) {\n        return setIsMessage(true);\n      }\n    };\n\n    fetcher();\n  }, [refetch]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Sender</p>\n        <div></div>\n        <div>\n          {emails.length !== 0 && (\n            <Table celled className={'table'}>\n              <Table.Header>\n                <Table.Row key={-1}>\n                  <Table.HeaderCell>Emails</Table.HeaderCell>\n                  <Table.HeaderCell>Address</Table.HeaderCell>\n                  <Table.HeaderCell>timesEmailed</Table.HeaderCell>\n                  <Table.HeaderCell>timesRedirected</Table.HeaderCell>\n                  <Table.HeaderCell>Email</Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n\n              <Table.Body>\n                {emails.map((email, idx) => (\n                  <Table.Row key={idx}>\n                    <Table.Cell>\n                      <Label ribbon>{idx === 0 ? 'First' : idx + 1}</Label>\n                    </Table.Cell>\n                    <Table.Cell>{email.address}</Table.Cell>\n                    <Table.Cell>{email.timesEmailed}</Table.Cell>\n                    <Table.Cell>{email.timesRedirected}</Table.Cell>\n                    <Table.Cell>\n                      <Button\n                        onClick={(e) => {\n                          e.preventDefault();\n                          e.stopPropagation();\n                          setCurrentEmail(email.address);\n                          setIsOpen(true);\n                        }}\n                        primary\n                      >\n                        Email\n                      </Button>\n                    </Table.Cell>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          )}\n          {isMessage && (\n            <div>\n              <Message\n                className={'message'}\n                negative\n                header=\"No New Emails Found, Reload The Page, Or Try Finding Some In The Finder\"\n              />\n              <Button\n                onClick={() => {\n                  setIsMessage(false);\n                  setRefetch(!refetch);\n                }}\n              >\n                Try Again\n              </Button>\n            </div>\n          )}\n          <div>\n            <Modal open={isOpen} onClose={() => setIsOpen(false)} size=\"small\">\n              <Header icon>\n                {/* <Icon name=\"email\" /> */}\n                Sending Email\n              </Header>\n              <Modal.Content>\n                <Form>\n                  <div style={{ display: 'flex' }}>\n                    <div className={'margin'}>\n                      <Label>Sender Email</Label>\n                      <Input\n                        onChange={(e) => setUser(e.target.value)}\n                        value={user}\n                        type=\"text\"\n                      />\n                    </div>\n                    <div className={'margin'}>\n                      <Label>Sender Email Pass</Label>\n                      <Input\n                        onChange={(e) => setPass(e.target.value)}\n                        value={pass}\n                        type=\"password\"\n                      />\n                    </div>\n                    <div className={'margin'}>\n                      <p>To: {currentEmail}</p>\n                    </div>\n                    <div className={'margin'}>\n                      <Button onClick={() => handleEmail()} primary>\n                        Send Email\n                      </Button>\n                    </div>\n                  </div>\n                </Form>\n              </Modal.Content>\n            </Modal>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n};\n\nexport default Sender;\n","import React, { useState } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport css from './App.css';\nimport { Button, Confirm, Message } from 'semantic-ui-react';\nimport { Router, Link } from '@reach/router';\nimport Finder from './pages/Finder';\nimport Sender from './pages/Sender';\nimport './App.css';\nimport axios from 'axios';\n\nconst Home = () => {\n  const handleDelete = async () => {\n    setIsOpen(false);\n    const { data } = await axios.delete('http://localhost:8000/emails');\n    if (data.status) {\n      setIsMessage(true);\n    } else {\n      alert('Sth Wrong');\n    }\n  };\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMessage, setIsMessage] = useState(false);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Welcome To Email Finder</p>\n        <div>\n          <Button className={'btn'} primary={true} positive={true}>\n            <Link to=\"/finder\">Finding Emails</Link>\n          </Button>\n          <Button primary={true} className={'btn'}>\n            <Link to=\"/sender\">Sending Emails</Link>\n          </Button>\n          <Button\n            onClick={() => setIsOpen(true)}\n            negative={true}\n            className={'btn'}\n          >\n            Delete All Emails From Data Base\n          </Button>\n          {isMessage && (\n            <Message\n              onDismiss={() => setIsMessage(false)}\n              negative\n              header=\"Emails Deleted\"\n            />\n          )}\n        </div>\n        <Confirm\n          content={'Delete All Emails From DB?'}\n          open={isOpen}\n          onCancel={() => setIsOpen(false)}\n          onConfirm={handleDelete}\n        />\n      </header>\n    </div>\n  );\n};\nfunction App() {\n  return (\n    <Router>\n      <Home path=\"/\" />\n      <Finder path=\"/finder\" />\n      <Sender path=\"/sender\" />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}